import torch
import torch.nn.functional as F
from torch_geometric.datasets import CIFAR10
from torch_geometric.data import DataLoader
from torch_geometric.nn import GCNConv

# Load the CIFAR-10 dataset
train_dataset = CIFAR10(root='/tmp/CIFAR10', train=True, download=True)
test_dataset = CIFAR10(root='/tmp/CIFAR10', train=False, download=True)

# Define the GCN model
class GCN(torch.nn.Module):
    def __init__(self, in_channels, hidden_channels, out_channels):
        super(GCN, self).__init__()
        self.conv1 = GCNConv(in_channels, hidden_channels)
        self.conv2 = GCNConv(hidden_channels, out_channels)
        self.fc = torch.nn.Linear(out_channels, 10)

    def forward(self, x, edge_index):
        # Apply the first graph convolutional layer
        x = self.conv1(x, edge_index)
        x = F.relu(x)
        x = F.dropout(x, training=self.training)

        # Apply the second graph convolutional layer
        x = self.conv2(x, edge_index)
        x = F.relu(x)
        x = F.dropout(x, training=self.training)

        # Apply the fully connected layer
        x = self.fc(x)

        return F.log_softmax(x, dim=1)

# Initialize the model and optimizer
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = GCN(in_channels=3, hidden_channels=64, out_channels=128).to(device)
optimizer = torch.optim.Adam(model.parameters(), lr=0.01)

# Train the model
model.train()
for epoch in range(50):
    total_loss = 0
    for batch in DataLoader(train_dataset, batch_size=64, shuffle=True):
        batch = batch.to(device)
        optimizer.zero_grad()
        out = model(batch.x.float() / 255.0, batch.edge_index)
        loss = F.nll_loss(out, batch.y)
        loss.backward()
        optimizer.step()
        total_loss += loss.item() * batch.num_graphs
    print(f'Epoch {epoch}, Loss {total_loss / len(train_dataset)}')

# Evaluate the model
model.eval()
correct = 0
for batch in DataLoader(test_dataset, batch_size=64):
    batch = batch.to(device)
    out = model(batch.x.float() / 255.0, batch.edge_index)
    pred = out.argmax(dim=1)
    correct += int((pred == batch.y).sum())
print(f'Test Accuracy {correct / len(test_dataset)}')
